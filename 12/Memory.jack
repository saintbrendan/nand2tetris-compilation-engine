// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram;
    static int heap;

    /** Initializes the class. */
    function void init() {
      let ram = 0;
      let heap = 2048;
      let heap[0] = 0;	// next
      let heap[1] = 14335;	// length   (16383 - 2048)
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[addr];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[addr] = value;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int block, newBlock, blockSize;
      let newBlock = null;
      let blockSize = size + 2;
      let block = free;
      while (block != null) {}
        if (block[1] >= size + 2) {
          newBlock = block + 2 + block[1] - blockSize;
          let block[1] = block[1] - (blockSize);
          return newBlock + 2;
        } else {
          if (block[0] == 0) {
            return null;
          }
        }
        let block = block[0];
      }
      return newBlock;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      return;
    }
}
